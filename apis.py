import google.generativeai as genai
from flask import request, jsonify
from marshmallow import ValidationError

from constants import INPUT_PROMPT, SYSTEM_PROMPT,MODEL_NAME,GEMINI_API_KEY,SAFETY_OPTIONS
from logger import logger,log_performance
from schemas import TranscriptSchema 


genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name=MODEL_NAME,generation_config={"response_mime_type": "application/json"},system_instruction=SYSTEM_PROMPT,safety_settings=SAFETY_OPTIONS)

@log_performance
def get_transcript_details():
    """
       This function takes company_name and transcript_text as input and returns the response generated by the model.
       
        Args:
        company_name (str): The name of the company.
        transcript_text (str): The transcript text to be analyzed.
        
        Returns:
        str: The response generated by the model. 
    """
    schema = TranscriptSchema()
    try:
        #Loading the schema
        data = schema.load(request.json)
        company_name = data['company_name']
        transcript_text = data['transcript_text']
        
        #Extracting the details
        logger.info(f"Generating content for company: {company_name}")
        response = model.generate_content(INPUT_PROMPT.format(company_name=company_name,transcript_text=transcript_text))
        return jsonify({"response": response.text})  
       
    except ValidationError as err:
        #Handling validation errors
        logger.error(f"Invalid input. Error: {err.messages}")
        return jsonify({"error": "Invalid input", "details": err.messages}), 400
    
    except Exception as e:
        #Handling internal errors
        logger.error(f"Error generating content for company: {company_name}. Error: {e}")
        return jsonify({"error": "An internal error occurred"}), 500